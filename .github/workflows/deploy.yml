name: Deploy to VPS

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
        
    - name: Install dependencies
      run: |
        cd frontend
        npm ci
        
    - name: Run tests
      run: |
        cd frontend
        npm run test --if-present
        
    - name: Build application
      run: |
        cd frontend
        npm run build
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-files
        path: frontend/.next
        retention-days: 1

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-files
        path: frontend/.next
        
    - name: Setup SSH
      uses: webfactory/ssh-agent@v0.7.0
      with:
        ssh-private-key: ${{ secrets.VPS_SSH_KEY }}
        
    - name: Add VPS to known hosts
      run: |
        ssh-keyscan -H ${{ secrets.VPS_HOST }} >> ~/.ssh/known_hosts
        
    - name: Deploy to VPS
      run: |
        # Create deployment directory
        ssh ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} "mkdir -p /tmp/fasttools-deploy"
        
        # Copy files to VPS
        rsync -avz --delete \
          --exclude 'node_modules' \
          --exclude '.git' \
          --exclude '.env*' \
          --exclude 'test-email.js' \
          ./ ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }}:/tmp/fasttools-deploy/
        
        # Run deployment script on VPS
        ssh ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} << 'EOF'
          set -e
          
          # Navigate to deployment directory
          cd /tmp/fasttools-deploy
          
          # Install dependencies
          cd frontend
          npm ci --production
          
          # Build application
          npm run build
          
          # Stop existing application
          sudo systemctl stop fasttools || true
          
          # Backup current deployment
          sudo cp -r /var/www/fasttools /var/www/fasttools-backup-$(date +%Y%m%d-%H%M%S) || true
          
          # Copy new files
          sudo rm -rf /var/www/fasttools
          sudo mkdir -p /var/www/fasttools
          sudo cp -r /tmp/fasttools-deploy/frontend/* /var/www/fasttools/
          
          # Set permissions
          sudo chown -R www-data:www-data /var/www/fasttools
          sudo chmod -R 755 /var/www/fasttools
          
          # Copy environment file
          sudo cp /etc/fasttools/.env.production /var/www/fasttools/.env.local
          
          # Reload Nginx configuration
          sudo nginx -t && sudo systemctl reload nginx
          
          # Start application
          sudo systemctl start fasttools
          sudo systemctl enable fasttools
          
          # Verify deployment
          sleep 5
          curl -f http://localhost:3000 || exit 1
          
          # Cleanup
          rm -rf /tmp/fasttools-deploy
          
          echo "Deployment completed successfully!"
        EOF
        
    - name: Notify deployment status
      if: always()
      run: |
        if [ "${{ job.status }}" == "success" ]; then
          echo "✅ Deployment successful!"
        else
          echo "❌ Deployment failed!"
          exit 1
        fi

  cleanup:
    needs: [test, deploy]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Cleanup old backups on VPS
      if: needs.deploy.result == 'success'
      run: |
        ssh ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} << 'EOF'
          # Keep only last 5 backups
          cd /var/www
          ls -t fasttools-backup-* | tail -n +6 | xargs -r sudo rm -rf
        EOF
      env:
        VPS_SSH_KEY: ${{ secrets.VPS_SSH_KEY }}
        VPS_HOST: ${{ secrets.VPS_HOST }}
        VPS_USER: ${{ secrets.VPS_USER }}